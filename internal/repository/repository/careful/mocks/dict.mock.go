// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\repository\repository\careful\tools\dict.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	tools "github.com/carefuly/careful-admin-go-gin/internal/domain/careful/tools"
	gomock "github.com/golang/mock/gomock"
)

// MockDictRepository is a mock of DictRepository interface.
type MockDictRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDictRepositoryMockRecorder
}

// MockDictRepositoryMockRecorder is the mock recorder for MockDictRepository.
type MockDictRepositoryMockRecorder struct {
	mock *MockDictRepository
}

// NewMockDictRepository creates a new mock instance.
func NewMockDictRepository(ctrl *gomock.Controller) *MockDictRepository {
	mock := &MockDictRepository{ctrl: ctrl}
	mock.recorder = &MockDictRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDictRepository) EXPECT() *MockDictRepositoryMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockDictRepository) BatchDelete(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockDictRepositoryMockRecorder) BatchDelete(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockDictRepository)(nil).BatchDelete), ctx, ids)
}

// CheckExistByCode mocks base method.
func (m *MockDictRepository) CheckExistByCode(ctx context.Context, code, excludeId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistByCode", ctx, code, excludeId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistByCode indicates an expected call of CheckExistByCode.
func (mr *MockDictRepositoryMockRecorder) CheckExistByCode(ctx, code, excludeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistByCode", reflect.TypeOf((*MockDictRepository)(nil).CheckExistByCode), ctx, code, excludeId)
}

// CheckExistByName mocks base method.
func (m *MockDictRepository) CheckExistByName(ctx context.Context, name, excludeId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistByName", ctx, name, excludeId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistByName indicates an expected call of CheckExistByName.
func (mr *MockDictRepositoryMockRecorder) CheckExistByName(ctx, name, excludeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistByName", reflect.TypeOf((*MockDictRepository)(nil).CheckExistByName), ctx, name, excludeId)
}

// Create mocks base method.
func (m *MockDictRepository) Create(ctx context.Context, domain tools.Dict) (tools.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, domain)
	ret0, _ := ret[0].(tools.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDictRepositoryMockRecorder) Create(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDictRepository)(nil).Create), ctx, domain)
}

// Delete mocks base method.
func (m *MockDictRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDictRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDictRepository)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockDictRepository) GetById(ctx context.Context, id string) (tools.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(tools.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDictRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDictRepository)(nil).GetById), ctx, id)
}

// GetByName mocks base method.
func (m *MockDictRepository) GetByName(ctx context.Context, name string) (tools.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(tools.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDictRepositoryMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDictRepository)(nil).GetByName), ctx, name)
}

// GetListAll mocks base method.
func (m *MockDictRepository) GetListAll(ctx context.Context, filters tools.DictFilter) ([]tools.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAll", ctx, filters)
	ret0, _ := ret[0].([]tools.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAll indicates an expected call of GetListAll.
func (mr *MockDictRepositoryMockRecorder) GetListAll(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAll", reflect.TypeOf((*MockDictRepository)(nil).GetListAll), ctx, filters)
}

// GetListPage mocks base method.
func (m *MockDictRepository) GetListPage(ctx context.Context, filters tools.DictFilter) ([]tools.Dict, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPage", ctx, filters)
	ret0, _ := ret[0].([]tools.Dict)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListPage indicates an expected call of GetListPage.
func (mr *MockDictRepositoryMockRecorder) GetListPage(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPage", reflect.TypeOf((*MockDictRepository)(nil).GetListPage), ctx, filters)
}

// Update mocks base method.
func (m *MockDictRepository) Update(ctx context.Context, domain tools.Dict) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDictRepositoryMockRecorder) Update(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDictRepository)(nil).Update), ctx, domain)
}
