// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\service\careful\tools\dict_type.go

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	tools "github.com/carefuly/careful-admin-go-gin/internal/domain/careful/tools"
	gomock "github.com/golang/mock/gomock"
)

// MockDictTypeService is a mock of DictTypeService interface.
type MockDictTypeService struct {
	ctrl     *gomock.Controller
	recorder *MockDictTypeServiceMockRecorder
}

// MockDictTypeServiceMockRecorder is the mock recorder for MockDictTypeService.
type MockDictTypeServiceMockRecorder struct {
	mock *MockDictTypeService
}

// NewMockDictTypeService creates a new mock instance.
func NewMockDictTypeService(ctrl *gomock.Controller) *MockDictTypeService {
	mock := &MockDictTypeService{ctrl: ctrl}
	mock.recorder = &MockDictTypeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDictTypeService) EXPECT() *MockDictTypeServiceMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockDictTypeService) BatchDelete(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockDictTypeServiceMockRecorder) BatchDelete(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockDictTypeService)(nil).BatchDelete), ctx, ids)
}

// Create mocks base method.
func (m *MockDictTypeService) Create(ctx context.Context, domain tools.DictType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDictTypeServiceMockRecorder) Create(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDictTypeService)(nil).Create), ctx, domain)
}

// Delete mocks base method.
func (m *MockDictTypeService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDictTypeServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDictTypeService)(nil).Delete), ctx, id)
}

// GetByDictNames mocks base method.
func (m *MockDictTypeService) GetByDictNames(ctx context.Context, dictNames []string) (map[string][]tools.DictType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDictNames", ctx, dictNames)
	ret0, _ := ret[0].(map[string][]tools.DictType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDictNames indicates an expected call of GetByDictNames.
func (mr *MockDictTypeServiceMockRecorder) GetByDictNames(ctx, dictNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDictNames", reflect.TypeOf((*MockDictTypeService)(nil).GetByDictNames), ctx, dictNames)
}

// GetById mocks base method.
func (m *MockDictTypeService) GetById(ctx context.Context, id string) (tools.DictType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(tools.DictType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDictTypeServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDictTypeService)(nil).GetById), ctx, id)
}

// GetListAll mocks base method.
func (m *MockDictTypeService) GetListAll(ctx context.Context, filter tools.DictTypeFilter) ([]tools.DictType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAll", ctx, filter)
	ret0, _ := ret[0].([]tools.DictType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAll indicates an expected call of GetListAll.
func (mr *MockDictTypeServiceMockRecorder) GetListAll(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAll", reflect.TypeOf((*MockDictTypeService)(nil).GetListAll), ctx, filter)
}

// GetListPage mocks base method.
func (m *MockDictTypeService) GetListPage(ctx context.Context, filter tools.DictTypeFilter) ([]tools.DictType, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPage", ctx, filter)
	ret0, _ := ret[0].([]tools.DictType)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListPage indicates an expected call of GetListPage.
func (mr *MockDictTypeServiceMockRecorder) GetListPage(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPage", reflect.TypeOf((*MockDictTypeService)(nil).GetListPage), ctx, filter)
}

// Update mocks base method.
func (m *MockDictTypeService) Update(ctx context.Context, domain tools.DictType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDictTypeServiceMockRecorder) Update(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDictTypeService)(nil).Update), ctx, domain)
}
