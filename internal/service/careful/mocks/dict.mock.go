// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\service\careful\tools\dict.go

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	tools "github.com/carefuly/careful-admin-go-gin/internal/domain/careful/tools"
	gomock "github.com/golang/mock/gomock"
)

// MockDictService is a mock of DictService interface.
type MockDictService struct {
	ctrl     *gomock.Controller
	recorder *MockDictServiceMockRecorder
}

// MockDictServiceMockRecorder is the mock recorder for MockDictService.
type MockDictServiceMockRecorder struct {
	mock *MockDictService
}

// NewMockDictService creates a new mock instance.
func NewMockDictService(ctrl *gomock.Controller) *MockDictService {
	mock := &MockDictService{ctrl: ctrl}
	mock.recorder = &MockDictServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDictService) EXPECT() *MockDictServiceMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockDictService) BatchDelete(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockDictServiceMockRecorder) BatchDelete(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockDictService)(nil).BatchDelete), ctx, ids)
}

// Create mocks base method.
func (m *MockDictService) Create(ctx context.Context, domain tools.Dict) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDictServiceMockRecorder) Create(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDictService)(nil).Create), ctx, domain)
}

// Delete mocks base method.
func (m *MockDictService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDictServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDictService)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockDictService) GetById(ctx context.Context, id string) (tools.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(tools.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDictServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDictService)(nil).GetById), ctx, id)
}

// GetByName mocks base method.
func (m *MockDictService) GetByName(ctx context.Context, name string) (tools.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(tools.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDictServiceMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDictService)(nil).GetByName), ctx, name)
}

// GetListAll mocks base method.
func (m *MockDictService) GetListAll(ctx context.Context, filters tools.DictFilter) ([]tools.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAll", ctx, filters)
	ret0, _ := ret[0].([]tools.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAll indicates an expected call of GetListAll.
func (mr *MockDictServiceMockRecorder) GetListAll(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAll", reflect.TypeOf((*MockDictService)(nil).GetListAll), ctx, filters)
}

// GetListPage mocks base method.
func (m *MockDictService) GetListPage(ctx context.Context, filters tools.DictFilter) ([]tools.Dict, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPage", ctx, filters)
	ret0, _ := ret[0].([]tools.Dict)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListPage indicates an expected call of GetListPage.
func (mr *MockDictServiceMockRecorder) GetListPage(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPage", reflect.TypeOf((*MockDictService)(nil).GetListPage), ctx, filters)
}

// Import mocks base method.
func (m *MockDictService) Import(ctx context.Context, userId, deptId string, listMap []map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Import", ctx, userId, deptId, listMap)
}

// Import indicates an expected call of Import.
func (mr *MockDictServiceMockRecorder) Import(ctx, userId, deptId, listMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockDictService)(nil).Import), ctx, userId, deptId, listMap)
}

// Update mocks base method.
func (m *MockDictService) Update(ctx context.Context, domain tools.Dict) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDictServiceMockRecorder) Update(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDictService)(nil).Update), ctx, domain)
}
